"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _Clear = _interopRequireDefault(require("../internal/svg-icons/Clear"));
var _styles = require("../styles");
var _ButtonBase = _interopRequireDefault(require("../ButtonBase"));
var _chipClasses = _interopRequireWildcard(require("./chipClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    classes,
    disabled,
    size,
    color,
    hasDeleteIcon,
    clickable,
    variant
  } = ownerState;
  const slots = {
    root: ['root', variant, disabled && 'disabled', `size${(0, _utils.unstable_capitalize)(size)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, clickable && 'clickable', hasDeleteIcon && 'deletable'],
    label: ['label'],
    avatar: ['avatar'],
    icon: ['icon'],
    deleteIcon: ['deleteIcon']
  };
  const composedClasses = (0, _base.unstable_composeClasses)(slots, _chipClasses.getChipUtilityClass, classes);
  return (0, _extends2.default)({}, classes, composedClasses);
};
const ChipRoot = (0, _styles.styled)('div', {
  name: 'MuiChip',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    const {
      color,
      clickable,
      hasDeleteIcon,
      size,
      variant
    } = ownerState;
    return [{
      [`& .${_chipClasses.default.avatar}`]: styles.avatar
    }, {
      [`& .${_chipClasses.default.icon}`]: styles.icon
    }, {
      [`& .${_chipClasses.default.deleteIcon}`]: styles.deleteIcon
    }, styles.root, styles[`size${(0, _utils.unstable_capitalize)(size)}`], color && styles[`color${(0, _utils.unstable_capitalize)(color)}`], clickable && styles.clickable, hasDeleteIcon && styles.deletable, styles[variant]];
  }
})(({
  theme,
  ownerState
}) => {
  var _ownerState$color, _ownerState$color2, _ownerState$color3, _ownerState$color4, _ownerState$color5;
  const {
    vars: tokens
  } = theme;
  const containerColor = {
    filled: tokens.sys.color[`${(_ownerState$color = ownerState.color) != null ? _ownerState$color : 'secondary'}Container`],
    outlined: 'transparent',
    elevated: tokens.sys.color[ownerState.color ? `${ownerState.color}Container` : 'surfaceContainerLow']
  };
  const labelTextColor = {
    filled: tokens.sys.color[`on${(0, _utils.unstable_capitalize)((_ownerState$color2 = ownerState.color) != null ? _ownerState$color2 : 'secondary')}Container`],
    outlined: tokens.sys.color.onSurface,
    elevated: tokens.sys.color[ownerState.color ? `on${(0, _utils.unstable_capitalize)(ownerState.color)}Container` : 'onSurface']
  };
  const containerElevation = {
    filled: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    elevated: tokens.sys.elevation[1]
  };
  const disabledContainerColor = {
    filled: `rgba(${tokens.sys.color.onSurfaceChannel} / 0.12)`,
    outlined: 'transparent',
    elevated: `rgba(${tokens.sys.color.onSurfaceChannel} / 0.12)`
  };
  const disabledContainerBorder = {
    filled: null,
    outlined: `1px solid rgba(${tokens.sys.color.onSurfaceChannel} / 0.12)`,
    elevated: null
  };
  const disabledElevation = {
    filled: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    elevated: tokens.sys.elevation[0]
  };
  const stateLayerBackgroundColor = {
    filled: tokens.sys.color.onSecondaryContainer,
    outlined: tokens.sys.color.onSurfaceVariant,
    elevated: tokens.sys.color.onSurfaceVariant
  };
  const hoveredContainerElevation = {
    filled: tokens.sys.elevation[1],
    outlined: tokens.sys.elevation[0],
    elevated: tokens.sys.elevation[2]
  };
  const focusedContainerElevation = {
    filled: tokens.sys.elevation[0],
    outlined: tokens.sys.elevation[0],
    elevated: tokens.sys.elevation[1]
  };
  const pressedContainerElevation = {
    filled: tokens.sys.elevation[1],
    outlined: tokens.sys.elevation[0],
    elevated: tokens.sys.elevation[1]
  };
  const letterSpacing = `${theme.sys.typescale.label.large.tracking / theme.sys.typescale.label.large.size}rem`;
  return (0, _extends2.default)({
    '--md-comp-chip-container-color': containerColor[ownerState.variant],
    '--md-comp-chip-label-padding-y': '16px',
    '--md-comp-chip-label-padding-left': 'var(--md-comp-chip-label-padding-y)',
    '--md-comp-chip-label-padding-right': 'var(--md-comp-chip-label-padding-y)',
    '--md-comp-chip-icon-size': '18px',
    position: 'relative',
    maxWidth: '100%',
    fontFamily: tokens.sys.typescale.label.large.family,
    fontSize: theme.typography.pxToRem(theme.sys.typescale.label.large.size),
    // the pxToRem should be moved to typescale in the future
    fontWeight: tokens.sys.typescale.label.large.weight,
    lineHeight: `calc(${tokens.sys.typescale.label.large.lineHeight} / ${theme.sys.typescale.label.large.size})`,
    letterSpacing,
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    height: 32,
    color: labelTextColor[ownerState.variant],
    backgroundColor: 'var(--md-comp-chip-container-color)',
    borderRadius: tokens.sys.shape.corner.small,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    transition: theme.transitions.create(['background-color', 'box-shadow']),
    boxSizing: 'border-box',
    boxShadow: containerElevation[ownerState.variant]
  }, ownerState.size === 'small' && {
    '--md-comp-chip-label-padding-y': '10px',
    '--md-comp-chip-icon-size': '16px',
    height: 24
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${tokens.sys.color[(_ownerState$color3 = ownerState.color) != null ? _ownerState$color3 : 'outline']}`,
    '--md-comp-chip-label-padding-left': 'calc(var(--md-comp-chip-label-padding-y) - 1px)',
    '--md-comp-chip-label-padding-right': 'calc(var(--md-comp-chip-label-padding-y) - 1px)'
  }, (ownerState.hasIcon || ownerState.hasAvatar) && {
    '--md-comp-chip-label-padding-left': ownerState.size === 'small' ? '6px' : '8px'
  }, ownerState.hasDeleteIcon && {
    '--md-comp-chip-label-padding-right': '5px',
    cursor: 'auto'
  }, {
    [`&.${_chipClasses.default.disabled}`]: {
      backgroundColor: disabledContainerColor[ownerState.variant],
      border: disabledContainerBorder[ownerState.variant],
      color: `rgba(${tokens.sys.color.onSurfaceChannel} / 0.38)`,
      boxShadow: disabledElevation[ownerState.variant],
      pointerEvents: 'none'
    }
  }, (ownerState.clickable || ownerState.hasDeleteIcon) && {
    [`&.${_chipClasses.default.focusVisible}`]: {
      boxShadow: focusedContainerElevation[ownerState.variant],
      '--md-comp-chip-container-color': `color-mix(in srgb, ${stateLayerBackgroundColor[ownerState.variant]} calc(${tokens.sys.state.focus.stateLayerOpacity} * 100%), ${containerColor[ownerState.variant]})`
    }
  }, ownerState.clickable && {
    WebkitTapHighlightColor: 'transparent',
    cursor: 'pointer',
    '&:hover': {
      boxShadow: hoveredContainerElevation[ownerState.variant],
      backgroundColor: `color-mix(in srgb, ${stateLayerBackgroundColor[ownerState.variant]} calc(${tokens.sys.state.hover.stateLayerOpacity} * 100%), var(--md-comp-chip-container-color))`
    },
    '&:active': {
      boxShadow: pressedContainerElevation[ownerState.variant]
    }
  }, {
    [`& .${_chipClasses.default.avatar}`]: (0, _extends2.default)({
      width: 24,
      height: 24,
      marginLeft: 4,
      color: tokens.sys.color[`on${(0, _utils.unstable_capitalize)((_ownerState$color4 = ownerState.color) != null ? _ownerState$color4 : 'secondary')}`],
      backgroundColor: tokens.sys.color[(_ownerState$color5 = ownerState.color) != null ? _ownerState$color5 : 'secondary'],
      fontSize: theme.typography.pxToRem(theme.sys.typescale.label.large.size)
    }, ownerState.size === 'small' && {
      height: 18,
      width: 18,
      fontSize: theme.typography.pxToRem(theme.sys.typescale.label.small.size) // the pxToRem should be moved to typescale in the future
    }),

    [`& .${_chipClasses.default.icon}`]: {
      height: 'var(--md-comp-chip-icon-size)',
      width: 'var(--md-comp-chip-icon-size)',
      marginLeft: 8
    },
    [`& .${_chipClasses.default.deleteIcon}`]: (0, _extends2.default)({
      boxSizing: 'content-box',
      zIndex: 1,
      height: 'var(--md-comp-chip-icon-size)',
      width: 'var(--md-comp-chip-icon-size)',
      padding: 3,
      marginRight: 5
    }, ownerState.size === 'small' && {
      padding: 1
    }, {
      WebkitTapHighlightColor: 'transparent',
      cursor: 'pointer',
      borderRadius: tokens.sys.shape.corner.full,
      '&:hover': {
        backgroundColor: `color-mix(in srgb, ${stateLayerBackgroundColor[ownerState.variant]} calc(${tokens.sys.state.hover.stateLayerOpacity} * 100%), var(--md-comp-chip-container-color))`
      }
    })
  });
});
const ChipLabel = (0, _styles.styled)('span', {
  name: 'MuiChip',
  slot: 'Label'
})({
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  paddingLeft: 'var(--md-comp-chip-label-padding-left)',
  paddingRight: 'var(--md-comp-chip-label-padding-right)'
});
function isDeleteKeyboardEvent(keyboardEvent) {
  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
}

/**
 * Chips represent complex entities in small blocks, such as a contact.
 *
 * Demos:
 *
 * - [Chip](https://mui.com/material-ui/react-chip/)
 *
 * API:
 *
 * - [Chip API](https://mui.com/material-ui/api/chip/)
 */
const Chip = /*#__PURE__*/React.forwardRef(function Chip(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiChip'
  });
  const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color,
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = 'medium',
      variant = 'filled'
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const chipRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(chipRef, ref);
  const handleDeleteIconClick = event => {
    // Stop the event from bubbling up to the `Chip`
    event.stopPropagation();
    if (onDelete) {
      onDelete(event);
    }
  };
  const handleKeyDown = event => {
    // Ignore events from children of `Chip`.
    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
      // Will be handled in keyUp, otherwise some browsers
      // might init navigation
      event.preventDefault();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const handleKeyUp = event => {
    // Ignore events from children of `Chip`.
    if (event.currentTarget === event.target) {
      if (onDelete && isDeleteKeyboardEvent(event)) {
        onDelete(event);
      } else if (event.key === 'Escape' && chipRef.current) {
        chipRef.current.blur();
      }
    }
    if (onKeyUp) {
      onKeyUp(event);
    }
  };
  const clickable = clickableProp !== false && onClick ? true : clickableProp;
  const isButton = clickable || !!onDelete;
  const component = isButton ? _ButtonBase.default : ComponentProp || 'div';
  const hasIcon = !!iconProp && /*#__PURE__*/React.isValidElement(iconProp);
  const hasDeleteIcon = !!onDelete;
  const hasAvatar = !!avatarProp && /*#__PURE__*/React.isValidElement(avatarProp);
  const ownerState = (0, _extends2.default)({}, props, {
    component,
    disabled,
    size,
    color,
    clickable,
    variant,
    hasIcon,
    hasDeleteIcon,
    hasAvatar
  });
  const classes = useUtilityClasses(ownerState);
  const buttonProps = (0, _extends2.default)({
    disabled: clickable && disabled,
    component: ComponentProp,
    focusVisibleClassName: _chipClasses.default.focusVisible
  }, onDelete && {
    disableRipple: true
  });
  let deleteIcon = null;
  if (onDelete) {
    var _deleteIconProp$props;
    deleteIcon = deleteIconProp && /*#__PURE__*/React.isValidElement(deleteIconProp) ? /*#__PURE__*/React.cloneElement(deleteIconProp, {
      className: (0, _clsx.default)((_deleteIconProp$props = deleteIconProp.props) == null ? void 0 : _deleteIconProp$props.className, classes.deleteIcon),
      onClick: handleDeleteIconClick
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Clear.default, {
      className: (0, _clsx.default)(classes.deleteIcon),
      onClick: handleDeleteIconClick
    });
  }
  let avatar = null;
  if (hasAvatar) {
    var _avatarProp$props;
    avatar = /*#__PURE__*/React.cloneElement(avatarProp, {
      className: (0, _clsx.default)(classes.avatar, (_avatarProp$props = avatarProp.props) == null ? void 0 : _avatarProp$props.className)
    });
  }
  let icon = null;
  if (hasIcon) {
    var _iconProp$props;
    icon = /*#__PURE__*/React.cloneElement(iconProp, {
      className: (0, _clsx.default)(classes.icon, (_iconProp$props = iconProp.props) == null ? void 0 : _iconProp$props.className)
    });
  }
  if (process.env.NODE_ENV !== 'production') {
    if (avatar && icon) {
      console.error('MUI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
    }
  }
  const rootProps = (0, _base.useSlotProps)({
    elementType: ChipRoot,
    getSlotProps: otherHandlers => (0, _extends2.default)({}, otherHandlers, {
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp
    }),
    externalForwardedProps: (0, _extends2.default)({
      onClick
    }, other),
    externalSlotProps: {},
    additionalProps: (0, _extends2.default)({
      as: component,
      ref: handleRef
    }, isButton && buttonProps),
    ownerState,
    className: [classes.root, className]
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ChipRoot, (0, _extends2.default)({}, rootProps, {
    children: [avatar || icon, /*#__PURE__*/(0, _jsxRuntime.jsx)(ChipLabel, {
      className: (0, _clsx.default)(classes.label),
      ownerState: ownerState,
      children: label
    }), deleteIcon]
  }));
});
process.env.NODE_ENV !== "production" ? Chip.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The Avatar element to display.
   */
  avatar: _propTypes.default.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: _utils.unstable_unsupportedProp,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: _propTypes.default.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['primary', 'secondary', 'tertiary', 'error', 'info', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: _propTypes.default.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * Icon element.
   */
  icon: _propTypes.default.element,
  /**
   * The content of the component.
   */
  label: _propTypes.default.node,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyUp: _propTypes.default.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['medium', 'small']), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * @ignore
   */
  tabIndex: _propTypes.default.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['filled', 'outlined', 'elevated']), _propTypes.default.string])
} : void 0;
var _default = exports.default = Chip;