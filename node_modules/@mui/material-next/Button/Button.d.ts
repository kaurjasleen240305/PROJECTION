import * as React from 'react';
import { ExtendButton, ButtonTypeMap, ButtonOwnerState } from './Button.types';
export declare const ButtonRoot: import("@emotion/styled").StyledComponent<{
    action?: React.Ref<import("../ButtonBase/ButtonBase.types").ButtonBaseActions> | undefined;
    centerRipple?: boolean | undefined;
    children?: React.ReactNode;
    classes?: Partial<import("../ButtonBase").ButtonBaseClasses> | undefined;
    disabled?: boolean | undefined;
    disableRipple?: boolean | undefined;
    disableTouchRipple?: boolean | undefined;
    focusableWhenDisabled?: boolean | undefined;
    focusVisibleClassName?: string | undefined;
    href?: string | undefined;
    LinkComponent?: React.ElementType<any> | undefined;
    onFocusVisible?: React.FocusEventHandler<any> | undefined;
    sx?: import("@mui/system").SxProps<import("../styles").Theme> | undefined;
    tabIndex?: number | undefined;
    TouchRippleProps?: Partial<import("../ButtonBase/TouchRipple.types").TouchRippleProps> | undefined;
    touchRippleRef?: React.Ref<import("../ButtonBase/TouchRipple.types").TouchRippleActions> | undefined;
    type?: string | undefined;
} & Omit<{
    action?: React.Ref<import("../ButtonBase/ButtonBase.types").ButtonBaseActions> | undefined;
    centerRipple?: boolean | undefined;
    children?: React.ReactNode;
    classes?: Partial<import("../ButtonBase").ButtonBaseClasses> | undefined;
    disabled?: boolean | undefined;
    disableRipple?: boolean | undefined;
    disableTouchRipple?: boolean | undefined;
    focusableWhenDisabled?: boolean | undefined;
    focusVisibleClassName?: string | undefined;
    href?: string | undefined;
    LinkComponent?: React.ElementType<any> | undefined;
    onFocusVisible?: React.FocusEventHandler<any> | undefined;
    sx?: import("@mui/system").SxProps<import("../styles").Theme> | undefined;
    tabIndex?: number | undefined;
    TouchRippleProps?: Partial<import("../ButtonBase/TouchRipple.types").TouchRippleProps> | undefined;
    touchRippleRef?: React.Ref<import("../ButtonBase/TouchRipple.types").TouchRippleActions> | undefined;
    type?: string | undefined;
}, "classes"> & Omit<Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
}, "disabled" | "action" | "href" | "tabIndex" | "type" | "children" | "focusableWhenDisabled" | "onFocusVisible" | "sx" | "classes" | "centerRipple" | "disableRipple" | "disableTouchRipple" | "focusVisibleClassName" | "LinkComponent" | "TouchRippleProps" | "touchRippleRef"> & import("@mui/system").MUIStyledCommonProps<import("../styles").Theme> & {
    ownerState: ButtonOwnerState;
}, {}, {}>;
declare const Button: ExtendButton<ButtonTypeMap>;
export default Button;
